<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-08-27T09:40:51-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Corels Osdt</title><link href="http://localhost:4000/corels_osdt" rel="alternate" type="text/html" title="Corels Osdt" /><published>2020-08-24T12:02:24-07:00</published><updated>2020-08-24T12:02:24-07:00</updated><id>http://localhost:4000/corels-osdt</id><content type="html" xml:base="http://localhost:4000/corels_osdt">&lt;div class=&quot;container-fluid bg-gray my-5 py-5&quot;&gt;
    &lt;div class=&quot;container pt-4&quot;&gt;
        &lt;h5&gt;CORELS&lt;/h5&gt;
        &lt;p&gt;Our story begins with CORELS, an algorithm for constructing Certifiably Optimal RulE Lists to perform (binary) classification on a relational dataset. Rule lists are one-sided decision trees: they give a direct classification whenever a rule’s antecedent evaluates to true. You can think of them as lists composed of if-then-else statements. One rule antecedent can check for multiple features of a sample. Rule lists are useful because each step in the model’s decision making process is understandable by humans, thus ensuring transparency in decision processes. CORELS finds the optimal rule list and certifies its optimality against all feasible alternatives.&lt;/p&gt;
        &lt;p&gt;We use the discrete optimization technique of branch-and-bound to eliminate large parts of the search space and turn this into a computationally feasible problem. We use different types of bounds inherent to the rules themselves, bounds based on the current best solution, and bounds based on symmetries between rule lists. In addition, we design efficient data structures to minimize the memory usage and runtime of our algorithm on this factorially difficult problem. In comparison to black-box models such as neural networks, we show that it is possible to build machine learning models that are more interpretable to humans without sacrificing accuracy.&lt;/p&gt;
        &lt;h5&gt;OSDT&lt;/h5&gt;
        &lt;p&gt;Spurred by the success of CORELS, we turn towards the much harder problem of finding optimal decision trees. Decision tree algorithms have been among the most popular algorithms for interpretable machine learning since the early 1980's. We tackle the problem that has plagued decision tree algorithms since their inception: their lack of certified optimality. Decision tree algorithms are often greedy or myopic, and sometimes produce unquestionably suboptimal models.&lt;/p&gt;
        &lt;p&gt;OSDT is the first practical algorithm for finding Optimal Sparse Decision Trees for binary variables. Inspired by CORELS, the algorithm is a co-design of analytical bounds that reduce the search space and modern systems techniques including data structures such as a custom bit-vector library. In spite of decision trees presenting a much bigger search space than rule lists, our success demonstrates the feasibility of finding optimal solutions using discrete optimization on modern computers.&lt;/p&gt; 
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;container&quot;&gt;
    &lt;h6&gt;On-Going Work&lt;/h6&gt;
        &lt;p&gt;We are currently working on two major extensions of OSDT and CORELS:&lt;/p&gt;
        &lt;ol&gt;
            &lt;li&gt;Generality: Both algorithms originally only perform binary classification. We are generalizing our binary classification objective to problems with more than two classes. We also want to experiment with objectives beyond empirical accuracy, taking imbalanced label distributions and different decision boundaries into account.&lt;/li&gt;
            &lt;li&gt;Scalability: To scale to larger feature sets and continuous features without sacrificing optimality, we are working on a new algorithm called dynamic-programming with bounds that lets us find optimal trees for a larger class of problems.&lt;/li&gt;
        &lt;/ol&gt;
        &lt;h6&gt;Papers&lt;/h6&gt;
        &lt;ol&gt;
        &lt;li&gt;CORELS JMLR paper [&lt;a href=&quot;https://www.seltzer.com/assets/publications/Learning-Certifiably-Optimal-Rule-Lists.pdf&quot;&gt;Link&lt;/a&gt;]&lt;/li&gt;
        &lt;li&gt;CORELS KDD paper [&lt;a href=&quot;https://www.kdd.org/kdd2017/papers/view/learning-certifiably-optimal-rule-lists-for-categorical-data&quot;&gt;Link&lt;/a&gt;]&lt;/li&gt;
        &lt;li&gt;OSDT paper for NeurIPS [&lt;a href=&quot;https://papers.nips.cc/paper/8947-optimal-sparse-decision-trees.pdf&quot;&gt;Link&lt;/a&gt;]&lt;/li&gt;
        &lt;li&gt;OSDT paper for NeurIPS [&lt;a href=&quot;https://arxiv.org/pdf/1904.12847.pdf&quot;&gt;Link&lt;/a&gt;]&lt;/li&gt;
        &lt;/ol&gt;
        &lt;h6&gt;Code&lt;/h6&gt;
        &lt;ol&gt;
        &lt;li&gt;PyCORELS [&lt;a href=&quot;https://pycorels.readthedocs.io/en/latest/CorelsClassifier.html&quot;&gt;Link&lt;/a&gt;]&lt;/li&gt;
        &lt;li&gt;Public C++ CORELS [&lt;a href=&quot;https://github.com/corels/corels&quot;&gt;Link&lt;/a&gt;]&lt;/li&gt;
        &lt;/ol&gt;
        &lt;h6&gt;Other Resources&lt;/h6&gt;
        &lt;ol&gt;
        &lt;li&gt;CORELS video [&lt;a href=&quot;https://pycorels.readthedocs.io/en/latest/CorelsClassifier.html&quot;&gt;Link&lt;/a&gt;]&lt;/li&gt;
        &lt;li&gt;Interactive CORELS [&lt;a href=&quot; https://corels.eecs.harvard.edu&quot;&gt;Link&lt;/a&gt;]&lt;/li&gt;
        &lt;li&gt;BA Thesis on CORELS Implementation [&lt;a href=&quot;https://corels.eecs.harvard.edu/corels/Larus-Stone_thesis.pdf&quot;&gt;Link&lt;/a&gt;]&lt;/li&gt;
        &lt;li&gt;Sean's Thesis on OSDT [&lt;a href=&quot;&quot;&gt;TBD&lt;/a&gt;]&lt;/li&gt;
        &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">CORELS Our story begins with CORELS, an algorithm for constructing Certifiably Optimal RulE Lists to perform (binary) classification on a relational dataset. Rule lists are one-sided decision trees: they give a direct classification whenever a rule’s antecedent evaluates to true. You can think of them as lists composed of if-then-else statements. One rule antecedent can check for multiple features of a sample. Rule lists are useful because each step in the model’s decision making process is understandable by humans, thus ensuring transparency in decision processes. CORELS finds the optimal rule list and certifies its optimality against all feasible alternatives. We use the discrete optimization technique of branch-and-bound to eliminate large parts of the search space and turn this into a computationally feasible problem. We use different types of bounds inherent to the rules themselves, bounds based on the current best solution, and bounds based on symmetries between rule lists. In addition, we design efficient data structures to minimize the memory usage and runtime of our algorithm on this factorially difficult problem. In comparison to black-box models such as neural networks, we show that it is possible to build machine learning models that are more interpretable to humans without sacrificing accuracy. OSDT Spurred by the success of CORELS, we turn towards the much harder problem of finding optimal decision trees. Decision tree algorithms have been among the most popular algorithms for interpretable machine learning since the early 1980's. We tackle the problem that has plagued decision tree algorithms since their inception: their lack of certified optimality. Decision tree algorithms are often greedy or myopic, and sometimes produce unquestionably suboptimal models. OSDT is the first practical algorithm for finding Optimal Sparse Decision Trees for binary variables. Inspired by CORELS, the algorithm is a co-design of analytical bounds that reduce the search space and modern systems techniques including data structures such as a custom bit-vector library. In spite of decision trees presenting a much bigger search space than rule lists, our success demonstrates the feasibility of finding optimal solutions using discrete optimization on modern computers. On-Going Work We are currently working on two major extensions of OSDT and CORELS: Generality: Both algorithms originally only perform binary classification. We are generalizing our binary classification objective to problems with more than two classes. We also want to experiment with objectives beyond empirical accuracy, taking imbalanced label distributions and different decision boundaries into account. Scalability: To scale to larger feature sets and continuous features without sacrificing optimality, we are working on a new algorithm called dynamic-programming with bounds that lets us find optimal trees for a larger class of problems. Papers CORELS JMLR paper [Link] CORELS KDD paper [Link] OSDT paper for NeurIPS [Link] OSDT paper for NeurIPS [Link] Code PyCORELS [Link] Public C++ CORELS [Link] Other Resources CORELS video [Link] Interactive CORELS [Link] BA Thesis on CORELS Implementation [Link] Sean's Thesis on OSDT [TBD]</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2020/06/23/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2020-06-23T15:02:24-07:00</published><updated>2020-06-23T15:02:24-07:00</updated><id>http://localhost:4000/jekyll/update/2020/06/23/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2020/06/23/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>